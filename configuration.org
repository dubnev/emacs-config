#+TITLE: Emacs Configuration
#+AUTHOR: William Neville
#+EMAIL: william@neville.com
#+OPTIONS: toc:nil num:nil

* Introduction

Almost all of this lifted from other, more sophisticated Emacs users. Those of 
note linked below:
[[https://github.com/abrochard/emacs-config][abrochard]]
[[https://github.com/hrs/dotfiles/tree/master/emacs/.emacs.d][hrs]]
[[https://jamiecollinson.com/blog/my-emacs-config/][jamie collinson]]

* Configure =use-package=

Package installation and configuration done via =use-package=. See =init.el= for
baseline configuration. 

Ensure that =use-package= installs package if not already installed.

#+BEGIN_SRC emacs-lisp :results output silent
  (setq use-package-always-ensure t)
#+END_SRC

Always compile packages, and use the newest version available.

#+BEGIN_SRC emacs-lisp :results output silent
  (use-package auto-compile
    :config (auto-compile-on-load-mode))

  (setq load-prefer-newer t)
#+END_SRC

* Benchmarking

Benchmarking Emacs startup. We want to include this as early as possible in this config.

#+BEGIN_SRC emacs-lisp :results output silent
  (use-package benchmark-init
    :ensure t
    :config
    (add-hook 'after-init-hook 'benchmark-init/deactivate))
#+END_SRC

Can get results on startup with =benchmark-init/show-durations-tabulated=

* Defaults
** Better Defaults

Main things I desire that we get with =better-defaults= are as follows:
- Disable toolbar, menu bar, scroll bar
- =uniquify= library to append directory names in buffer if file name not unique
- =C-x C-b= uses ibuffer
- =show-paren-mode= enabled
- More extensive apropos search
- =indent-tabs-mode= defaulting to nil - spaces instead of tabs

#+BEGIN_SRC emacs-lisp :results output silent
  (use-package better-defaults)
#+END_SRC

** Garbage Collection 

Allow 40MB of memory before calling garbage collection.

#+BEGIN_SRC emacs-lisp :results output silent
  (setq gc-cons-threshold 40000000)
#+END_SRC

** Start Emacs server

My main use case for this is in order to use org-protocol to capture from web browsers

#+BEGIN_SRC emacs-lisp :results output silent
  (server-start)
#+END_SRC

* UI/UX
I only use GUI emacs - these are baseline modifications.
** Windows, Frames and Buffers
*** If OS X "bonks" at me one more time
#+BEGIN_SRC emacs-lisp
(setq ring-bell-function 'ignore)
#+END_SRC
*** Start in full screen by default
#+BEGIN_SRC emacs-lisp
(toggle-frame-maximized)
#+END_SRC
*** Scratch buffer empty, please.
#+BEGIN_SRC emacs-lisp
(setq initial-scratch-message nil)
#+END_SRC
*** Inhibit startup message.
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
#+END_SRC
*** Column number mode
#+BEGIN_SRC emacs-lisp
(setq column-number-mode t)
#+END_SRC
** UI
*** Theme
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package doom-themes
    :config
    (load-theme 'doom-one t)
    (doom-themes-org-config))
#+END_SRC

*** Font

Use Hack font if installed.

#+BEGIN_SRC emacs-lisp
(if (condition-case nil
        (x-list-fonts "Hack")
      (error nil))
    (progn
      (add-to-list 'default-frame-alist '(font . "Hack-12"))
      (set-face-attribute 'default nil :font "Hack-12")))
#+END_SRC

*** All the icons!
all-the-icons makes neotree look cooler. Workaround to install fonts if not already installed.
#+BEGIN_SRC emacs-lisp
(use-package all-the-icons
  :config (lambda ()  ;; workaround to only install fonts if not already installed
            (unless (member "all-the-icons" (font-family-list))
              (all-the-icons-install-fonts t))))
#+END_SRC
** UX
*** Ask for confirmation before quitting
The number of times I've fat fingered C-x C-c...
#+BEGIN_SRC emacs-lisp
(setq confirm-kill-emacs 'y-or-n-p)
#+END_SRC

*** Accept "y" and "n" in place of "yes" and "no"
#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

*** Auto-indent on RET rather than just C-j
#+BEGIN_SRC emacs-lisp
(define-key global-map (kbd "RET") 'newline-and-indent)
#+END_SRC

* Personal Information
#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Will Neville"
        user-mail-address "will@dubnev.com"
        calendar-latitude 40.72
        calendar-longitude -73.99
        calendar-location-name "New York, NY")
#+END_SRC

* Version Control
** Magit

You can basically do everything from magit-status.

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :bind ("C-x g" . magit-status))
#+END_SRC

* Org Mode
** Set environment

Base configuration.

#+BEGIN_SRC emacs-lisp :results output silent
  (use-package org
    :bind (("C-c l" . org-store-link)
           ("C-c a" . org-agenda)
           ("C-c c" . org-capture))
    :hook (org-mode . org-indent-mode))
  (setq org-directory "~/Dropbox/org/")
#+END_SRC

I like to log completion time of repeated tasks.

#+BEGIN_SRC emacs-lisp :results output silent
  (setq org-log-repeat "time")
#+END_SRC

Hide scheduled items from agenda view if they are done.

#+BEGIN_SRC emacs-lisp :results output silent
  (setq org-agenda-skip-scheduled-if-done t)
#+END_SRC

Start showing upcoming deadlines in agenda 4 days in advance as opposed to default 14.

#+BEGIN_SRC emacs-lisp :results output silent
  (setq org-deadline-warning-days 4)
#+END_SRC

I keep all my org stuff in Dropbox. Experimenting with =beorg= on iOS,
so this behooves me.

#+BEGIN_SRC emacs-lisp :results output silent
  (setq org-agenda-files '("~/.emacs.d/configuration.org" "~/Dropbox/org"))
#+END_SRC

Add some more states for todos.

#+BEGIN_SRC emacs-lisp :results output silent
  (setq org-todo-keywords
        '((sequence "TODO(t)" "WAIT(w@/!)""DONE(d!)")))
  (setq org-todo-keyword-faces
             '(("WAIT" . "yellow")))
#+END_SRC

** Utility Functions

Lifted from [[https://github.com/abrochard/emacs-config/blob/master/configuration.org#org-mode][here]], thanks Adrien

#+BEGIN_SRC emacs-lisp :results output silent
  (defun org-file-path (filename)
    "Return the absolute address of an org file, given its relative name."
    (concat (file-name-as-directory org-directory) filename))

  (defun org-find-file ()
    "Leverage Helm to quickly open any org files."
    (interactive)
    (find-file (org-file-path (helm-comp-read "Select your org file: " (directory-files org-directory nil "\.org$")))))

  (global-set-key (kbd "C-c M-o") 'org-find-file)
#+END_SRC

** Exporting

Export to github flavored markdown
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package ox-gfm)
#+END_SRC

** Org-babel
Load up the languages we want org-babel to be able to execute.
#+BEGIN_SRC emacs-lisp :results output silent
  (org-babel-do-load-languages
   (quote org-babel-load-languages)
   (quote ((emacs-lisp . t)
           (python . t)
           (org . t))))
#+END_SRC

** Org-bullets
More readable.
#+BEGIN_SRC emacs-lisp :results output silent
(use-package org-bullets
  :config (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC
** Capture Templates

#+BEGIN_SRC emacs-lisp :results output silent
  (setq org-capture-templates
      '(("t" "Quick TODO" entry
          (file+headline "~/Dropbox/org/gtd.org" "Shortterm")
          "* TODO %?\nSCHEDULED: %t\nCaptured: %U\n")
        ("p" "Personal TODO" entry
          (file+headline "~/Dropbox/org/gtd.org" "Personal")
          "* TODO %?\nCaptured: %U\n")
        ("e" "Emacs Todo" entry
          (file+headline "~/Dropbox/org/gtd.org" "Emacs")
          "* TODO %?\nCaptured: %U\n")
        ("r" "Restaurant" entry
          (file+headline "~/Dropbox/org/lists.org" "Restaurants")
          "* UPCOMING %?\nCaptured: %U\nPrimary: \nRecommended Dishes: \nSource: \n")
        ("l" "Web Link" entry
          (file+headline "~/Dropbox/org/lists.org" "Internet Content")
          "* UPCOMING %:description\nCaptured: %U\n%:link\n")
        ("m" "Movie" entry
          (file+headline "~/Dropbox/org/lists.org" "Movies")
          "* UPCOMING %?\nCaptured: %U\nGist: \nSource: \n")
        ("s" "TV Show" entry
          (file+headline "~/Dropbox/org/lists.org" "TV Shows")
          "* UPCOMING %?\nCaptured: %U\nGist: \nSource: \n")
        ("b" "Book" entry
         (file+headline "~/Dropbox/org/lists.org" "Books")
         "* UPCOMING %?\nCaptured: %U\nAuthor(s): \nGist: \nSource: \n")))
#+END_SRC

** Org-Protocol

I currently use Emacs as my reading list aggregator (mild plans to use Pocket in the future). We need =org-protocol= required to accept incoming requests, and to ensure that Emacs server is started.

See [[https://github.com/xuchunyang/setup-org-protocol-on-mac][Setting Up org-protocl on Mac]] for more details.

#+BEGIN_SRC emacs-lisp :results output silent
  (server-start)
  (require 'org-protocol)
#+END_SRC

* Helm

Helm for our completion engine - I like both Helm and Ivy, but am a little more used to Helm at this point.

First installing related fuzzy match packages so we can configure them alongside the main Helm package.

#+BEGIN_SRC emacs-lisp :results output silent
  (use-package flx)
  (use-package helm-flx)
#+END_SRC

Now the juice, don yer hats.

#+BEGIN_SRC emacs-lisp :results output silent
  (use-package helm
    :demand
    :diminish helm-mode
    :bind (("M-x" . helm-M-x)
           ("M-y" . helm-show-kill-ring)
           ("C-x b" . helm-mini)
           ("C-x C-f" . helm-find-files))
    :config
    (helm-mode 1)
    (helm-flx-mode +1)
    (setq helm-M-x-fuzzy-match t)
    (setq helm-locate-fuzzy-match t)
    (setq helm-lisp-fuzzy-completion t)
    (setq helm-buffer-max-length 48))
#+END_SRC

=helm-ag= is a package to use =the_silver_searcher= as your searching tool in Emacs. However, it supports specifying the underlying search tool - so, we use =ripgrep= as it's a little faster.
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package ag)
  (use-package helm-ag
    :config (setq helm-ag-base-command "rg --no-heading"))
#+END_SRC

=helm-system-packages= to get an interface with =brew= (and =portage= if I can get this config working in Gentoo).
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package helm-system-packages)
#+END_SRC

=helm-xref= to get a helm interface for xref results.
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package helm-xref)
#+END_SRC

* Projectile

Love me some projectile.

#+BEGIN_SRC emacs-lisp :results output silent
  (use-package projectile
    :diminish projectile-mode
    :config
    (projectile-mode)
    (setq projectile-project-search-path '("~/code/"))
    (projectile-discover-projects-in-search-path)
    (add-to-list 'projectile-known-projects "~/.emacs.d/")
    (add-to-list 'projectile-known-projects "~/Dropbox/org/")
    (setq projectile-enable-caching t)
    (setq-default projectile-mode-line
     '(:eval
       (if (file-remote-p default-directory)
           " Proj"
         (format " Proj[%s]" (projectile-project-name)))))
    (add-to-list 'projectile-globally-ignored-directories "node_modules")
    (add-to-list 'projectile-globally-ignored-directories ".venv"))
#+END_SRC

Let's add some Helm to that.

#+BEGIN_SRC emacs-lisp :results output silent
  (use-package helm-projectile
    :bind (("C-c v" . helm-projectile)
           ("C-c f" . helm-projectile-find-file)
           ("C-c b" . helm-projectile-switch-to-buffer)
           ("C-c s" . helm-do-ag-project-root)
           ("C-c w" . helm-projectile-switch-project)))
#+END_SRC

=org-projectile= for tracking project-specific todos
#+BEGIN_SRC emacs-lisp :results output silent
  (setq dub/org-projectile-filename "todos.org")

  (defun dub/goto-project-todos ()
    (interactive)
    (let ((maybe-file-path (concat (projectile-project-root) dub/org-projectile-filename)))
      (when (file-exists-p maybe-file-path)
        (find-file maybe-file-path))))

  (use-package org-projectile
    :after org
    :bind (("C-c n t" . org-projectile-capture-for-current-project)
           ("C-c p t" . dub/goto-project-todos))
    :config
    (progn
      (org-projectile-per-project)
      (setq org-projectile-per-project-filepath dub/org-projectile-filename)
      (setq org-agenda-files (append org-agenda-files (org-projectile-todo-files)))))
#+END_SRC

* Development
** Flycheck
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package flycheck
    :config
    (global-flycheck-mode))
#+END_SRC

** LSP

Configure LSP - I only use it for Python, currently.

#+BEGIN_SRC emacs-lisp :results output silent
  (use-package lsp-mode
    :config
    (require 'lsp-clients)
    (setq lsp-auto-guess-root t)
    (setq lsp-prefer-flymake nil)

    (use-package lsp-ui
      :hook
      (lsp-mode . lsp-ui-mode)
      :bind
      (:map lsp-ui-mode-map
        ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
        ([remap xref-find-references] . lsp-ui-peek-find-references)
        ("C-c u" . lsp-ui-imenu))
      :custom
      (lsp-ui-sideline-enable nil "Hide sideline")
      (lsp-ui-peek-always-show t "Show peek even only one matching"))

    (use-package company-lsp
      :after company
      :config
      (setq company-lsp-cache-candidates 'auto)
      (push 'company-lsp company-backends))

    (use-package helm-lsp
      :commands (helm-lsp-workspace-symbol helm-lsp-global-workspace-symbol))

    (setq lsp-language-id-configuration
      '((python-mode . "python")))

    ;; Python pyls configuration
    (add-hook 'python-mode-hook 'lsp)

    (add-to-list 'lsp-file-watch-ignored "[/\\\\]env$")
    (add-to-list 'lsp-file-watch-ignored "[/\\\\]\\.venv$")
  
    ;; Optional LSP debugging
    ;; (setq lsp-print-io t)
    ;; (setq lsp-log-io t)
    ;; (setq lsp-trace t)
    ;; (setq lsp-print-performance t)
   )
#+END_SRC

** Python

Need to use =pyvenv= to activate the relevant virtualenv for your project.
#+BEGIN_SRC emacs-lisp :results output silent
(use-package pyvenv)
#+END_SRC

** JavaScript / Typescript / Web

This config is mostly borrowed from the fantastic Jamie Collinson (their config is linked above).

=tide= is used for TypeScript.
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package tide)

  (defun setup-tide-mode ()
    (interactive)
    (tide-setup)
    (flycheck-mode +1)
    (setq flycheck-check-syntax-automatically '(save mode-enabled))
    (eldoc-mode +1)
    (tide-hl-identifier-mode +1)
    (company-mode +1))

  (add-hook 'typescript-mode-hook #'setup-tide-mode)

  (setq-default typescript-indent-level 4)
#+END_SRC

=js2-mode= is 1 better than builtin JS Mode.
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package js2-mode
    :defer t
    :mode "\\.js\\'"
    :config
    (setq-default js-indent-level 2)
    (setq-default js2-ignored-warnings '("msg.extra.trailing.comma"))
    (setq-default flycheck-disabled-checkers (append flycheck-disabled-checkers '(javascript-jshint)))
    (flycheck-add-mode 'javascript-eslint 'js2-mode))
#+END_SRC

=js2-refactor= for some additional refactoring options on top of =js2-mode=.
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package js2-refactor
    :defer t
    :config
    (js2r-add-keybindings-with-prefix "C-c C-r")
    :hook
    (js2-mode . js2-refactor-mode))
#+END_SRC

=xref-js2= for jumping to definitions and references in JavaScript.
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package xref-js2
    :config
    (define-key js2-mode-map (kbd "M-.") nil)
    (setq xref-js2-search-program 'rg)
    (add-hook 'js2-mode-hook (lambda ()
                               (add-hook 'xref-backend-functions #'xref-js2-xref-backend nil t))))
#+END_SRC

=rjsx-mode= for working with JSX.
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package rjsx-mode
    :defer t
    :config
    (flycheck-add-mode 'javascript-eslint 'rjsx-mode))
#+END_SRC

=web-mode= for html/css.
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package web-mode
    :mode "\\.html\\'"
    :config
    (setq web-mode-enable-auto-pairing t)
    (setq web-mode-enable-css-colorization t)
    (setq web-mode-markup-indent-offset 2))
#+END_SRC

=jest= is a porcelain to run Jest in Emacs.
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package jest
    :hook (js2-mode . jest-minor-mode))
#+END_SRC

=flycheck-jest= as a Flycheck extension for Jest testing framework.
#+BEGIN_SRC emacs-lisp :results output silentn
  (use-package flycheck-jest
    :config
    (flycheck-jest-setup))
#+END_SRC

=add-node-modules-path= adds =node_modules/.bin/= directory to buffer local exec-paths.
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package add-node-modules-path
    :hook
    (js2-mode . add-node-modules-path)
    (rjsx-mode . add-node-modules-path)
    (typescript-mode . add-node-modules-path)
    (yaml-mode . add-node-modules-path)
    (json-mode . add-node-modules-path))
#+END_SRC

=prettier-js= for autoformatting of JS. Need to have =prettier= installed on host via your package manager.
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package prettier-js
    :defer t
    :hook
    (js2-mode . prettier-js-mode)
    (rjsx-mode . prettier-js-mode)
    (typescript-mode . prettier-js-mode)
    (yaml-mode . prettier-js-mode)
    (json-mode . prettier-js-mode))
#+END_SRC

=npm-mode= is a really nifty little package. Command map [[https://github.com/mojochao/npm-mode#command-keymap][here]].
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package npm-mode
    :defer t
    :hook
    (js2-mode . npm-mode)
    (rjsx-mode . npm-mode)
    (typescript-mode . npm-mode))
#+END_SRC

=indium= for interactive Node development. Requires =indium= be installed via npm as well. Need to work on re-binding breakpoint commands as they interfere with my =helm-projectile= ones.
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package indium
    :hook (js2-mode . indium-interaction-mode)
    :config
    (define-key indium-interaction-mode-map (kbd "C-c b") nil))
#+END_SRC

** RainbowDelimiters
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC

** Company
Company-mode quality of life fixes. 
#+BEGIN_SRC emacs-lisp :results output silent
  (setq company-idle-delay 0.3)
  (setq company-minimum-prefix-length 1)
  (setq company-selection-wrap-around t)
  (setq company-global-modes '(not org-mode))
  (global-company-mode)
#+END_SRC

** Multiple Curors
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package multiple-cursors
    :bind (("C-c C->" . 'mc/mark-all-like-this)
           ("C->" . 'mc/mark-next-like-this)
           ("C-<" . 'mc/mark-previous-like-this)))
#+END_SRC

** Development adjacent
*** Restclient

Restclient consistently gets oohs and aahs when I use it to demo at sprint reviews - thanks to it I've been able to ditch Postman.

#+BEGIN_SRC emacs-lisp :results output silent
  (use-package restclient
    :mode ("\\.http\\'" . restclient-mode))
#+END_SRC

Let's add a dash of company to that.

#+BEGIN_SRC emacs-lisp :results output silent
  (use-package company-restclient
    :config (add-to-list 'company-backends 'company-restclient))
#+END_SRC

*** Fish Shell

For editing Fish shell files - this may go away if I ever have the courage to fully pivot to eshell.

#+BEGIN_SRC emacs-lisp :results output silent
(use-package fish-mode)
#+END_SRC

*** Yaml Mode

Who doesn't have to edit some yaml in this day and age?

#+BEGIN_SRC emacs-lisp :results output silent
(use-package yaml-mode)
#+END_SRC

*** JSON Mode

This feels like the "don't you guys have phones?" of major modes.

#+BEGIN_SRC emacs-lisp :results output silent
(use-package json-mode)
#+END_SRC

*** Dockerfile Mode

I don't often edit Dockerfiles, but when I do...

#+BEGIN_SRC emacs-lisp :results output silent
(use-package dockerfile-mode)
#+END_SRC

* Eshell
Almost entirely lifted from Adrien Brochard's [[https://github.com/abrochard/emacs-config/blob/master/configuration.org#eshell][eshell configuration]].
** Package configuration
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package eshell
    :init
    (setq eshell-scroll-to-bottom-on-input 'all
          eshell-error-if-no-glob t
          eshell-hist-ignoredups t
          eshell-save-history-on-exit t
          eshell-prefer-lisp-functions nil
          eshell-destroy-buffer-when-process-dies t))
#+END_SRC

** Utility Functions
*** Clear
#+BEGIN_SRC emacs-lisp :results output silent
  (defun eshell/clear ()
    (let ((inhibit-read-only t))
      (erase-buffer)))
#+END_SRC

*** Close
#+BEGIN_SRC emacs-lisp :results output silent
  (defun eshell/close ()
    (delete-window))
#+END_SRC

*** Helm history
#+BEGIN_SRC emacs-lisp :results output silent
  (add-hook 'eshell-mode-hook
            (lambda ()
              (define-key eshell-mode-map (kbd "M-r") 'helm-eshell-history)))
#+END_SRC

*** Close window on exit
#+BEGIN_SRC emacs-lisp :results output silent
  (defun eshell-pop--kill-and-delete-window ()
    (unless (one-window-p)
      (delete-window)))

  (add-hook 'eshell-exit-hook 'eshell-pop--kill-and-delete-window)
#+END_SRC
* Snippets

Using [[https://github.com/AndreaCrotti/yasnippet-snippets][this community library]], which are saved in =~/.emacs.d/yasnippet-snippets=. My snippets are in =~/.emacs.d/snippets=.

#+BEGIN_SRC emacs-lisp :results output silent
  (use-package yasnippet
    :diminish yas-minor-mode
    :config
    (add-to-list 'yas-snippet-dirs "~/.emacs.d/yasnippet-snippets")
    (add-to-list 'yas-snippet-dirs "~/.emacs.d/snippets")
    (yas-global-mode)
    (global-set-key (kbd "M-/") 'company-yasnippet))
#+END_SRC

* Internal Doc Enhancement
** =helpful= for prettier docs
#+BEGIN_SRC emacs-lisp  :results output silent
  (use-package helpful
    :bind (("C-h f" . helpful-callable)
           ("C-h v" . helpful-variable)
           ("C-h k" . helpful-key)
           ("C-h F" . helpful-function)
           ("C-h C" . helpful-command)))
#+END_SRC

* Misc Configuration
** exec-path-from-shell (OSX specific)
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package exec-path-from-shell
    :config
    (when (memq window-system '(mac ns))
      (exec-path-from-shell-initialize)
      (exec-path-from-shell-copy-envs
       '("PATH"))))
#+END_SRC
** Backups in one folder
Don't like to pollute the file tree with backups if I don't have to.
#+BEGIN_SRC emacs-lisp :results output silent
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
#+END_SRC
** Diminishes
#+BEGIN_SRC emacs-lisp :results output silent
  (diminish 'abbrev-mode)
  (diminish 'eldoc-mode)
  (diminish 'company-mode)
  (diminish 'auto-revert-mode)
#+END_SRC
** Generic utility functions

A function to quickly jump to this configuration file.

#+BEGIN_SRC emacs-lisp :results output silent
  (defun dub/goto-configuration ()
    (interactive)
    (find-file "~/.emacs.d/configuration.org"))

  (global-set-key (kbd "C-c M-c") 'dub/goto-configuration)
#+END_SRC
* Unsorted
Empty!...for now.

